// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGrowHubServer.Infrastructure.Data;

#nullable disable

namespace SmartGrowHubServer.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240722233531_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("SettingId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("PlantId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("GrowHubs");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.PlantDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<byte[]>("GrowHubId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrowHubId");

                    b.ToTable("SensorReading");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("GrowHubId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrowHubId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.UserDb", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb", b =>
                {
                    b.HasOne("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", "Setting")
                        .WithMany("Components")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", b =>
                {
                    b.HasOne("SmartGrowHubServer.Infrastructure.Data.Model.PlantDb", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId");

                    b.HasOne("SmartGrowHubServer.Infrastructure.Data.Model.UserDb", "User")
                        .WithMany("GrowHubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb", b =>
                {
                    b.HasOne("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", "GrowHub")
                        .WithMany("SensorReadings")
                        .HasForeignKey("GrowHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowHub");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", b =>
                {
                    b.HasOne("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", "GrowHub")
                        .WithMany("Settings")
                        .HasForeignKey("GrowHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowHub");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", b =>
                {
                    b.Navigation("SensorReadings");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("SmartGrowHubServer.Infrastructure.Data.Model.UserDb", b =>
                {
                    b.Navigation("GrowHubs");
                });
#pragma warning restore 612, 618
        }
    }
}
