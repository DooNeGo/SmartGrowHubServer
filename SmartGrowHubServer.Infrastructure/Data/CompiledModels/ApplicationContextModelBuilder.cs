// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SmartGrowHubServer.Infrastructure.Data.CompiledModels
{
    public partial class ApplicationContextModel
    {
        partial void Initialize()
        {
            var componentDb = ComponentDbEntityType.Create(this);
            var growHubDb = GrowHubDbEntityType.Create(this);
            var plantDb = PlantDbEntityType.Create(this);
            var sensorReadingDb = SensorReadingDbEntityType.Create(this);
            var settingDb = SettingDbEntityType.Create(this);
            var userDb = UserDbEntityType.Create(this);

            ComponentDbEntityType.CreateForeignKey1(componentDb, settingDb);
            GrowHubDbEntityType.CreateForeignKey1(growHubDb, plantDb);
            GrowHubDbEntityType.CreateForeignKey2(growHubDb, userDb);
            SensorReadingDbEntityType.CreateForeignKey1(sensorReadingDb, growHubDb);
            SettingDbEntityType.CreateForeignKey1(settingDb, growHubDb);

            ComponentDbEntityType.CreateAnnotations(componentDb);
            GrowHubDbEntityType.CreateAnnotations(growHubDb);
            PlantDbEntityType.CreateAnnotations(plantDb);
            SensorReadingDbEntityType.CreateAnnotations(sensorReadingDb);
            SettingDbEntityType.CreateAnnotations(settingDb);
            UserDbEntityType.CreateAnnotations(userDb);

            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var componentDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            componentDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var smartGrowHubServerInfrastructureDataModelComponentDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.Columns.Add("Id", idColumnBase);
            var settingIdColumnBase = new ColumnBase<ColumnMappingBase>("SettingId", "varbinary(16)", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.Columns.Add("SettingId", settingIdColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "int", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.Columns.Add("Type", typeColumnBase);
            var unitColumnBase = new ColumnBase<ColumnMappingBase>("Unit", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.Columns.Add("Unit", unitColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "int", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb", smartGrowHubServerInfrastructureDataModelComponentDbTableBase);
            var smartGrowHubServerInfrastructureDataModelComponentDbMappingBase = new TableMappingBase<ColumnMappingBase>(componentDb, smartGrowHubServerInfrastructureDataModelComponentDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelComponentDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelComponentDbMappingBase, false);
            defaultTableMappings.Add(smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, componentDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)settingIdColumnBase, componentDb.FindProperty("SettingId")!, smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, componentDb.FindProperty("Type")!, smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase, componentDb.FindProperty("Unit")!, smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, componentDb.FindProperty("Value")!, smartGrowHubServerInfrastructureDataModelComponentDbMappingBase);

            var tableMappings = new List<TableMapping>();
            componentDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var componentsTable = new Table("Components", null, relationalModel);
            var idColumn = new Column("Id", "varbinary(16)", componentsTable);
            componentsTable.Columns.Add("Id", idColumn);
            var settingIdColumn = new Column("SettingId", "varbinary(16)", componentsTable);
            componentsTable.Columns.Add("SettingId", settingIdColumn);
            var typeColumn = new Column("Type", "int", componentsTable);
            componentsTable.Columns.Add("Type", typeColumn);
            var unitColumn = new Column("Unit", "nvarchar(max)", componentsTable);
            componentsTable.Columns.Add("Unit", unitColumn);
            var valueColumn = new Column("Value", "int", componentsTable);
            componentsTable.Columns.Add("Value", valueColumn);
            var pK_Components = new UniqueConstraint("PK_Components", componentsTable, new[] { idColumn });
            componentsTable.PrimaryKey = pK_Components;
            var pK_ComponentsUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb",
                new[] { "Id" });
            pK_Components.MappedKeys.Add(pK_ComponentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ComponentsUc).Add(pK_Components);
            componentsTable.UniqueConstraints.Add("PK_Components", pK_Components);
            var iX_Components_SettingId = new TableIndex(
            "IX_Components_SettingId", componentsTable, new[] { settingIdColumn }, false);
            var iX_Components_SettingIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb",
                new[] { "SettingId" });
            iX_Components_SettingId.MappedIndexes.Add(iX_Components_SettingIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Components_SettingIdIx).Add(iX_Components_SettingId);
            componentsTable.Indexes.Add("IX_Components_SettingId", iX_Components_SettingId);
            relationalModel.Tables.Add(("Components", null), componentsTable);
            var componentsTableMapping = new TableMapping(componentDb, componentsTable, true);
            componentsTable.AddTypeMapping(componentsTableMapping, false);
            tableMappings.Add(componentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, componentDb.FindProperty("Id")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(settingIdColumn, componentDb.FindProperty("SettingId")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, componentDb.FindProperty("Type")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn, componentDb.FindProperty("Unit")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, componentDb.FindProperty("Value")!, componentsTableMapping);

            var growHubDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            growHubDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase);
            smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase.Columns.Add("Id", idColumnBase0);
            var plantIdColumnBase = new ColumnBase<ColumnMappingBase>("PlantId", "varbinary(16)", smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase)
            {
                IsNullable = true
            };
            smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase.Columns.Add("PlantId", plantIdColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "varbinary(16)", smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase);
            smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb", smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase);
            var smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase = new TableMappingBase<ColumnMappingBase>(growHubDb, smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelGrowHubDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase, false);
            defaultTableMappings0.Add(smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, growHubDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)plantIdColumnBase, growHubDb.FindProperty("PlantId")!, smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, growHubDb.FindProperty("UserId")!, smartGrowHubServerInfrastructureDataModelGrowHubDbMappingBase);

            var tableMappings0 = new List<TableMapping>();
            growHubDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var growHubsTable = new Table("GrowHubs", null, relationalModel);
            var idColumn0 = new Column("Id", "varbinary(16)", growHubsTable);
            growHubsTable.Columns.Add("Id", idColumn0);
            var plantIdColumn = new Column("PlantId", "varbinary(16)", growHubsTable)
            {
                IsNullable = true
            };
            growHubsTable.Columns.Add("PlantId", plantIdColumn);
            var userIdColumn = new Column("UserId", "varbinary(16)", growHubsTable);
            growHubsTable.Columns.Add("UserId", userIdColumn);
            var pK_GrowHubs = new UniqueConstraint("PK_GrowHubs", growHubsTable, new[] { idColumn0 });
            growHubsTable.PrimaryKey = pK_GrowHubs;
            var pK_GrowHubsUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            pK_GrowHubs.MappedKeys.Add(pK_GrowHubsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GrowHubsUc).Add(pK_GrowHubs);
            growHubsTable.UniqueConstraints.Add("PK_GrowHubs", pK_GrowHubs);
            var iX_GrowHubs_PlantId = new TableIndex(
            "IX_GrowHubs_PlantId", growHubsTable, new[] { plantIdColumn }, false);
            var iX_GrowHubs_PlantIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "PlantId" });
            iX_GrowHubs_PlantId.MappedIndexes.Add(iX_GrowHubs_PlantIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GrowHubs_PlantIdIx).Add(iX_GrowHubs_PlantId);
            growHubsTable.Indexes.Add("IX_GrowHubs_PlantId", iX_GrowHubs_PlantId);
            var iX_GrowHubs_UserId = new TableIndex(
            "IX_GrowHubs_UserId", growHubsTable, new[] { userIdColumn }, false);
            var iX_GrowHubs_UserIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "UserId" });
            iX_GrowHubs_UserId.MappedIndexes.Add(iX_GrowHubs_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GrowHubs_UserIdIx).Add(iX_GrowHubs_UserId);
            growHubsTable.Indexes.Add("IX_GrowHubs_UserId", iX_GrowHubs_UserId);
            relationalModel.Tables.Add(("GrowHubs", null), growHubsTable);
            var growHubsTableMapping = new TableMapping(growHubDb, growHubsTable, true);
            growHubsTable.AddTypeMapping(growHubsTableMapping, false);
            tableMappings0.Add(growHubsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, growHubDb.FindProperty("Id")!, growHubsTableMapping);
            RelationalModel.CreateColumnMapping(plantIdColumn, growHubDb.FindProperty("PlantId")!, growHubsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, growHubDb.FindProperty("UserId")!, growHubsTableMapping);

            var plantDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.PlantDb")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            plantDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var smartGrowHubServerInfrastructureDataModelPlantDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.PlantDb", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelPlantDbTableBase);
            smartGrowHubServerInfrastructureDataModelPlantDbTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelPlantDbTableBase);
            smartGrowHubServerInfrastructureDataModelPlantDbTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.PlantDb", smartGrowHubServerInfrastructureDataModelPlantDbTableBase);
            var smartGrowHubServerInfrastructureDataModelPlantDbMappingBase = new TableMappingBase<ColumnMappingBase>(plantDb, smartGrowHubServerInfrastructureDataModelPlantDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelPlantDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelPlantDbMappingBase, false);
            defaultTableMappings1.Add(smartGrowHubServerInfrastructureDataModelPlantDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, plantDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelPlantDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, plantDb.FindProperty("Name")!, smartGrowHubServerInfrastructureDataModelPlantDbMappingBase);

            var tableMappings1 = new List<TableMapping>();
            plantDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var plantsTable = new Table("Plants", null, relationalModel);
            var idColumn1 = new Column("Id", "varbinary(16)", plantsTable);
            plantsTable.Columns.Add("Id", idColumn1);
            var nameColumn = new Column("Name", "nvarchar(max)", plantsTable);
            plantsTable.Columns.Add("Name", nameColumn);
            var pK_Plants = new UniqueConstraint("PK_Plants", plantsTable, new[] { idColumn1 });
            plantsTable.PrimaryKey = pK_Plants;
            var pK_PlantsUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.PlantDb",
                new[] { "Id" });
            pK_Plants.MappedKeys.Add(pK_PlantsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PlantsUc).Add(pK_Plants);
            plantsTable.UniqueConstraints.Add("PK_Plants", pK_Plants);
            relationalModel.Tables.Add(("Plants", null), plantsTable);
            var plantsTableMapping = new TableMapping(plantDb, plantsTable, true);
            plantsTable.AddTypeMapping(plantsTableMapping, false);
            tableMappings1.Add(plantsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, plantDb.FindProperty("Id")!, plantsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, plantDb.FindProperty("Name")!, plantsTableMapping);

            var sensorReadingDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            sensorReadingDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "date", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var growHubIdColumnBase = new ColumnBase<ColumnMappingBase>("GrowHubId", "varbinary(16)", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("GrowHubId", growHubIdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Id", idColumnBase2);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "int", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Type", typeColumnBase0);
            var unitColumnBase0 = new ColumnBase<ColumnMappingBase>("Unit", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Unit", unitColumnBase0);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("Value", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Value", valueColumnBase0);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb", smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase);
            var smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase = new TableMappingBase<ColumnMappingBase>(sensorReadingDb, smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelSensorReadingDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase, false);
            defaultTableMappings2.Add(smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, sensorReadingDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, sensorReadingDb.FindProperty("CreatedAt")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)growHubIdColumnBase, sensorReadingDb.FindProperty("GrowHubId")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, sensorReadingDb.FindProperty("Type")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase0, sensorReadingDb.FindProperty("Unit")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, sensorReadingDb.FindProperty("Value")!, smartGrowHubServerInfrastructureDataModelSensorReadingDbMappingBase);

            var tableMappings2 = new List<TableMapping>();
            sensorReadingDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var sensorReadingTable = new Table("SensorReading", null, relationalModel);
            var idColumn2 = new Column("Id", "varbinary(16)", sensorReadingTable);
            sensorReadingTable.Columns.Add("Id", idColumn2);
            var createdAtColumn = new Column("CreatedAt", "date", sensorReadingTable);
            sensorReadingTable.Columns.Add("CreatedAt", createdAtColumn);
            var growHubIdColumn = new Column("GrowHubId", "varbinary(16)", sensorReadingTable);
            sensorReadingTable.Columns.Add("GrowHubId", growHubIdColumn);
            var typeColumn0 = new Column("Type", "int", sensorReadingTable);
            sensorReadingTable.Columns.Add("Type", typeColumn0);
            var unitColumn0 = new Column("Unit", "nvarchar(max)", sensorReadingTable);
            sensorReadingTable.Columns.Add("Unit", unitColumn0);
            var valueColumn0 = new Column("Value", "nvarchar(max)", sensorReadingTable);
            sensorReadingTable.Columns.Add("Value", valueColumn0);
            var pK_SensorReading = new UniqueConstraint("PK_SensorReading", sensorReadingTable, new[] { idColumn2 });
            sensorReadingTable.PrimaryKey = pK_SensorReading;
            var pK_SensorReadingUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "Id" });
            pK_SensorReading.MappedKeys.Add(pK_SensorReadingUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SensorReadingUc).Add(pK_SensorReading);
            sensorReadingTable.UniqueConstraints.Add("PK_SensorReading", pK_SensorReading);
            var iX_SensorReading_GrowHubId = new TableIndex(
            "IX_SensorReading_GrowHubId", sensorReadingTable, new[] { growHubIdColumn }, false);
            var iX_SensorReading_GrowHubIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "GrowHubId" });
            iX_SensorReading_GrowHubId.MappedIndexes.Add(iX_SensorReading_GrowHubIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SensorReading_GrowHubIdIx).Add(iX_SensorReading_GrowHubId);
            sensorReadingTable.Indexes.Add("IX_SensorReading_GrowHubId", iX_SensorReading_GrowHubId);
            relationalModel.Tables.Add(("SensorReading", null), sensorReadingTable);
            var sensorReadingTableMapping = new TableMapping(sensorReadingDb, sensorReadingTable, true);
            sensorReadingTable.AddTypeMapping(sensorReadingTableMapping, false);
            tableMappings2.Add(sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, sensorReadingDb.FindProperty("Id")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, sensorReadingDb.FindProperty("CreatedAt")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(growHubIdColumn, sensorReadingDb.FindProperty("GrowHubId")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, sensorReadingDb.FindProperty("Type")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn0, sensorReadingDb.FindProperty("Unit")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, sensorReadingDb.FindProperty("Value")!, sensorReadingTableMapping);

            var settingDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            settingDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var smartGrowHubServerInfrastructureDataModelSettingDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", null, relationalModel);
            var growHubIdColumnBase0 = new ColumnBase<ColumnMappingBase>("GrowHubId", "varbinary(16)", smartGrowHubServerInfrastructureDataModelSettingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSettingDbTableBase.Columns.Add("GrowHubId", growHubIdColumnBase0);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelSettingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSettingDbTableBase.Columns.Add("Id", idColumnBase3);
            var modeColumnBase = new ColumnBase<ColumnMappingBase>("Mode", "int", smartGrowHubServerInfrastructureDataModelSettingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSettingDbTableBase.Columns.Add("Mode", modeColumnBase);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("Type", "int", smartGrowHubServerInfrastructureDataModelSettingDbTableBase);
            smartGrowHubServerInfrastructureDataModelSettingDbTableBase.Columns.Add("Type", typeColumnBase1);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.SettingDb", smartGrowHubServerInfrastructureDataModelSettingDbTableBase);
            var smartGrowHubServerInfrastructureDataModelSettingDbMappingBase = new TableMappingBase<ColumnMappingBase>(settingDb, smartGrowHubServerInfrastructureDataModelSettingDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelSettingDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelSettingDbMappingBase, false);
            defaultTableMappings3.Add(smartGrowHubServerInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, settingDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)growHubIdColumnBase0, settingDb.FindProperty("GrowHubId")!, smartGrowHubServerInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modeColumnBase, settingDb.FindProperty("Mode")!, smartGrowHubServerInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, settingDb.FindProperty("Type")!, smartGrowHubServerInfrastructureDataModelSettingDbMappingBase);

            var tableMappings3 = new List<TableMapping>();
            settingDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var settingsTable = new Table("Settings", null, relationalModel);
            var idColumn3 = new Column("Id", "varbinary(16)", settingsTable);
            settingsTable.Columns.Add("Id", idColumn3);
            var growHubIdColumn0 = new Column("GrowHubId", "varbinary(16)", settingsTable);
            settingsTable.Columns.Add("GrowHubId", growHubIdColumn0);
            var modeColumn = new Column("Mode", "int", settingsTable);
            settingsTable.Columns.Add("Mode", modeColumn);
            var typeColumn1 = new Column("Type", "int", settingsTable);
            settingsTable.Columns.Add("Type", typeColumn1);
            var pK_Settings = new UniqueConstraint("PK_Settings", settingsTable, new[] { idColumn3 });
            settingsTable.PrimaryKey = pK_Settings;
            var pK_SettingsUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SettingDb",
                new[] { "Id" });
            pK_Settings.MappedKeys.Add(pK_SettingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SettingsUc).Add(pK_Settings);
            settingsTable.UniqueConstraints.Add("PK_Settings", pK_Settings);
            var iX_Settings_GrowHubId = new TableIndex(
            "IX_Settings_GrowHubId", settingsTable, new[] { growHubIdColumn0 }, false);
            var iX_Settings_GrowHubIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SettingDb",
                new[] { "GrowHubId" });
            iX_Settings_GrowHubId.MappedIndexes.Add(iX_Settings_GrowHubIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Settings_GrowHubIdIx).Add(iX_Settings_GrowHubId);
            settingsTable.Indexes.Add("IX_Settings_GrowHubId", iX_Settings_GrowHubId);
            relationalModel.Tables.Add(("Settings", null), settingsTable);
            var settingsTableMapping = new TableMapping(settingDb, settingsTable, true);
            settingsTable.AddTypeMapping(settingsTableMapping, false);
            tableMappings3.Add(settingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, settingDb.FindProperty("Id")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(growHubIdColumn0, settingDb.FindProperty("GrowHubId")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(modeColumn, settingDb.FindProperty("Mode")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, settingDb.FindProperty("Type")!, settingsTableMapping);

            var userDb = FindEntityType("SmartGrowHubServer.Infrastructure.Data.Model.UserDb")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            userDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var smartGrowHubServerInfrastructureDataModelUserDbTableBase = new TableBase("SmartGrowHubServer.Infrastructure.Data.Model.UserDb", null, relationalModel);
            var displayNameColumnBase = new ColumnBase<ColumnMappingBase>("DisplayName", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.Columns.Add("DisplayName", displayNameColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "varbinary(16)", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.Columns.Add("Id", idColumnBase4);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.Columns.Add("Password", passwordColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(max)", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHubServer.Infrastructure.Data.Model.UserDb", smartGrowHubServerInfrastructureDataModelUserDbTableBase);
            var smartGrowHubServerInfrastructureDataModelUserDbMappingBase = new TableMappingBase<ColumnMappingBase>(userDb, smartGrowHubServerInfrastructureDataModelUserDbTableBase, true);
            smartGrowHubServerInfrastructureDataModelUserDbTableBase.AddTypeMapping(smartGrowHubServerInfrastructureDataModelUserDbMappingBase, false);
            defaultTableMappings4.Add(smartGrowHubServerInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, userDb.FindProperty("Id")!, smartGrowHubServerInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNameColumnBase, userDb.FindProperty("DisplayName")!, smartGrowHubServerInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, userDb.FindProperty("Email")!, smartGrowHubServerInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, userDb.FindProperty("Password")!, smartGrowHubServerInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, userDb.FindProperty("UserName")!, smartGrowHubServerInfrastructureDataModelUserDbMappingBase);

            var tableMappings4 = new List<TableMapping>();
            userDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn4 = new Column("Id", "varbinary(16)", usersTable);
            usersTable.Columns.Add("Id", idColumn4);
            var displayNameColumn = new Column("DisplayName", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("DisplayName", displayNameColumn);
            var emailColumn = new Column("Email", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("Email", emailColumn);
            var passwordColumn = new Column("Password", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("Password", passwordColumn);
            var userNameColumn = new Column("UserName", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("UserName", userNameColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn4 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.UserDb",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(userDb, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings4.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, userDb.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(displayNameColumn, userDb.FindProperty("DisplayName")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, userDb.FindProperty("Email")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, userDb.FindProperty("Password")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, userDb.FindProperty("UserName")!, usersTableMapping);
            var fK_Components_Settings_SettingId = new ForeignKeyConstraint(
                "FK_Components_Settings_SettingId", componentsTable, settingsTable,
                new[] { settingIdColumn },
                settingsTable.FindUniqueConstraint("PK_Settings")!, ReferentialAction.Cascade);
            var fK_Components_Settings_SettingIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.ComponentDb",
                new[] { "SettingId" },
                "SmartGrowHubServer.Infrastructure.Data.Model.SettingDb",
                new[] { "Id" });
            fK_Components_Settings_SettingId.MappedForeignKeys.Add(fK_Components_Settings_SettingIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Components_Settings_SettingIdFk).Add(fK_Components_Settings_SettingId);
            componentsTable.ForeignKeyConstraints.Add(fK_Components_Settings_SettingId);
            settingsTable.ReferencingForeignKeyConstraints.Add(fK_Components_Settings_SettingId);
            var fK_GrowHubs_Plants_PlantId = new ForeignKeyConstraint(
                "FK_GrowHubs_Plants_PlantId", growHubsTable, plantsTable,
                new[] { plantIdColumn },
                plantsTable.FindUniqueConstraint("PK_Plants")!, ReferentialAction.NoAction);
            var fK_GrowHubs_Plants_PlantIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "PlantId" },
                "SmartGrowHubServer.Infrastructure.Data.Model.PlantDb",
                new[] { "Id" });
            fK_GrowHubs_Plants_PlantId.MappedForeignKeys.Add(fK_GrowHubs_Plants_PlantIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GrowHubs_Plants_PlantIdFk).Add(fK_GrowHubs_Plants_PlantId);
            growHubsTable.ForeignKeyConstraints.Add(fK_GrowHubs_Plants_PlantId);
            plantsTable.ReferencingForeignKeyConstraints.Add(fK_GrowHubs_Plants_PlantId);
            var fK_GrowHubs_Users_UserId = new ForeignKeyConstraint(
                "FK_GrowHubs_Users_UserId", growHubsTable, usersTable,
                new[] { userIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_GrowHubs_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "UserId" },
                "SmartGrowHubServer.Infrastructure.Data.Model.UserDb",
                new[] { "Id" });
            fK_GrowHubs_Users_UserId.MappedForeignKeys.Add(fK_GrowHubs_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GrowHubs_Users_UserIdFk).Add(fK_GrowHubs_Users_UserId);
            growHubsTable.ForeignKeyConstraints.Add(fK_GrowHubs_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_GrowHubs_Users_UserId);
            var fK_SensorReading_GrowHubs_GrowHubId = new ForeignKeyConstraint(
                "FK_SensorReading_GrowHubs_GrowHubId", sensorReadingTable, growHubsTable,
                new[] { growHubIdColumn },
                growHubsTable.FindUniqueConstraint("PK_GrowHubs")!, ReferentialAction.Cascade);
            var fK_SensorReading_GrowHubs_GrowHubIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "GrowHubId" },
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            fK_SensorReading_GrowHubs_GrowHubId.MappedForeignKeys.Add(fK_SensorReading_GrowHubs_GrowHubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SensorReading_GrowHubs_GrowHubIdFk).Add(fK_SensorReading_GrowHubs_GrowHubId);
            sensorReadingTable.ForeignKeyConstraints.Add(fK_SensorReading_GrowHubs_GrowHubId);
            growHubsTable.ReferencingForeignKeyConstraints.Add(fK_SensorReading_GrowHubs_GrowHubId);
            var fK_Settings_GrowHubs_GrowHubId = new ForeignKeyConstraint(
                "FK_Settings_GrowHubs_GrowHubId", settingsTable, growHubsTable,
                new[] { growHubIdColumn0 },
                growHubsTable.FindUniqueConstraint("PK_GrowHubs")!, ReferentialAction.Cascade);
            var fK_Settings_GrowHubs_GrowHubIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHubServer.Infrastructure.Data.Model.SettingDb",
                new[] { "GrowHubId" },
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            fK_Settings_GrowHubs_GrowHubId.MappedForeignKeys.Add(fK_Settings_GrowHubs_GrowHubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Settings_GrowHubs_GrowHubIdFk).Add(fK_Settings_GrowHubs_GrowHubId);
            settingsTable.ForeignKeyConstraints.Add(fK_Settings_GrowHubs_GrowHubId);
            growHubsTable.ReferencingForeignKeyConstraints.Add(fK_Settings_GrowHubs_GrowHubId);
            return relationalModel.MakeReadOnly();
        }
    }
}
