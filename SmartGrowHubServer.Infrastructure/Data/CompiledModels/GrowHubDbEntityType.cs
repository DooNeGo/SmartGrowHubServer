// <auto-generated />
using System;
using System.Collections;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGrowHubServer.Infrastructure.Data.Convertors;
using SmartGrowHubServer.Infrastructure.Data.Model;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SmartGrowHubServer.Infrastructure.Data.CompiledModels
{
    internal partial class GrowHubDbEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SmartGrowHubServer.Infrastructure.Data.Model.GrowHubDb",
                typeof(GrowHubDb),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Ulid),
                propertyInfo: typeof(GrowHubDb).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GrowHubDb).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new UlidConverter());
            id.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<Ulid>(
                    (Ulid v1, Ulid v2) => v1.Equals(v2),
                    (Ulid v) => v.GetHashCode(),
                    (Ulid v) => v),
                keyComparer: new ValueComparer<Ulid>(
                    (Ulid v1, Ulid v2) => v1.Equals(v2),
                    (Ulid v) => v.GetHashCode(),
                    (Ulid v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<Ulid, byte[]>(
                    (Ulid model) => model.ToByteArray(),
                    (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Ulid, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<Ulid, byte[]>(
                        (Ulid model) => model.ToByteArray(),
                        (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider))));
            id.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plantId = runtimeEntityType.AddProperty(
                "PlantId",
                typeof(Ulid?),
                propertyInfo: typeof(GrowHubDb).GetProperty("PlantId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GrowHubDb).GetField("<PlantId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new UlidConverter());
            plantId.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<Ulid?>(
                    (Nullable<Ulid> v1, Nullable<Ulid> v2) => v1.HasValue && v2.HasValue && ((Ulid)v1).Equals((Ulid)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<Ulid> v) => v.HasValue ? ((Ulid)v).GetHashCode() : 0,
                    (Nullable<Ulid> v) => v.HasValue ? (Nullable<Ulid>)(Ulid)v : default(Nullable<Ulid>)),
                keyComparer: new ValueComparer<Ulid?>(
                    (Nullable<Ulid> v1, Nullable<Ulid> v2) => v1.HasValue && v2.HasValue && ((Ulid)v1).Equals((Ulid)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<Ulid> v) => v.HasValue ? ((Ulid)v).GetHashCode() : 0,
                    (Nullable<Ulid> v) => v.HasValue ? (Nullable<Ulid>)(Ulid)v : default(Nullable<Ulid>)),
                providerValueComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<Ulid, byte[]>(
                    (Ulid model) => model.ToByteArray(),
                    (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Ulid, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<Ulid, byte[]>(
                        (Ulid model) => model.ToByteArray(),
                        (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider))));
            plantId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(Ulid),
                propertyInfo: typeof(GrowHubDb).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GrowHubDb).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new UlidConverter());
            userId.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<Ulid>(
                    (Ulid v1, Ulid v2) => v1.Equals(v2),
                    (Ulid v) => v.GetHashCode(),
                    (Ulid v) => v),
                keyComparer: new ValueComparer<Ulid>(
                    (Ulid v1, Ulid v2) => v1.Equals(v2),
                    (Ulid v) => v.GetHashCode(),
                    (Ulid v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<Ulid, byte[]>(
                    (Ulid model) => model.ToByteArray(),
                    (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Ulid, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<Ulid, byte[]>(
                        (Ulid model) => model.ToByteArray(),
                        (Byte[] provider) => new Ulid((ReadOnlySpan<byte>)provider))));
            userId.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { plantId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { userId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlantId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var plant = declaringEntityType.AddNavigation("Plant",
                runtimeForeignKey,
                onDependent: true,
                typeof(PlantDb),
                propertyInfo: typeof(GrowHubDb).GetProperty("Plant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GrowHubDb).GetField("<Plant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var user = declaringEntityType.AddNavigation("User",
                runtimeForeignKey,
                onDependent: true,
                typeof(UserDb),
                propertyInfo: typeof(GrowHubDb).GetProperty("User", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GrowHubDb).GetField("<User>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var growHubs = principalEntityType.AddNavigation("GrowHubs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ImmutableArray<GrowHubDb>),
                propertyInfo: typeof(UserDb).GetProperty("GrowHubs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserDb).GetField("<GrowHubs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "GrowHubs");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
